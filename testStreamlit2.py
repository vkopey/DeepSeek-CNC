# –î–ª—è –∑–∞–ø—É—Å–∫—É –ø—Ä–æ–≥—Ä–∞–º–º–∏ –≤–≤–µ–¥—ñ—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—ñ:
# streamlit run testStreamlit.py

example="""
G21       ; –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ—Ç—Ä–∏—á–Ω–∏—Ö –æ–¥–∏–Ω–∏—Ü—å (–º—ñ–ª—ñ–º–µ—Ç—Ä–∏)
G90       ; –ê–±—Å–æ–ª—é—Ç–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
G0 X0 Y0 Z0  ; –®–≤–∏–¥–∫–µ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –¥–æ –ø–æ—á–∞—Ç–∫—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (–±–µ–∑ –º–∞–ª—é–≤–∞–Ω–Ω—è)
G1 X100 Y0 Z0 F1000 ; –ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –Ω–∞ —à–≤–∏–¥–∫–æ—Å—Ç—ñ –ø–æ–¥–∞—á—ñ
G1 X100 Y20 Z0
G1 X20 Y10 Z0
"""

from APIkey import key as api_key
from openai import OpenAI
import streamlit as st
import re

def is_gcode(text):
    """–ü–æ–≤–µ—Ä—Ç–∞—î True, —è–∫—â–æ —É—Å—ñ —Ä—è–¥–∫–∏ —Ç–µ–∫—Å—Ç—É —î G-–∫–æ–¥–æ–º. –¢–æ–±—Ç–æ –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –∑ G –∞–±–æ M, –∑–∞ —è–∫–∏–º–∏ —ñ–¥–µ —Ü–∏—Ñ—Ä–∞"""
    return all([bool(re.match(r"^G\d+|M\d+", ln.strip())) for ln in text.strip().splitlines()])

def get_gcode(text):
    """–ü–æ–≤–µ—Ä—Ç–∞—î G-–∫–æ–¥ –±–µ–∑ Markdown —Ç–µ–∫—Å—Ç—É```gcode...```"""
    mo=re.match("```gcode(.*)```", text, re.S)
    if mo==None: return
    return mo.group(1).strip()

def parse_gcode(text):
    """–í–∏–∫–æ–Ω—É—î –Ω–∞–π–ø—Ä–æ—Å—Ç—ñ—à–∏–π –ø–∞—Ä—Å–∏–Ω–≥ G-–∫–æ–¥—É. –ö–æ–¥ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –≤ —Ç–∞–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ: G1 X5 Y5 Z5. –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç X,Y,Z"""
    X, Y, Z = [], [], [] # –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
    for line in text.splitlines():
        mo=re.match("G[0|1] X(?P<X>[0-9]*) Y(?P<Y>[0-9]*) Z(?P<Z>[0-9]*)", line, re.S) # –ø–æ—à—É–∫ –≤ —Ä—è–¥–∫—É –∑–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–∏–º –≤–∏—Ä–∞–∑–æ–º
        if mo==None: continue # —è–∫—â–æ –Ω–µ–º–∞—î, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ä—è–¥–æ–∫
        XYZ=mo.groupdict() # —Å–ª–æ–≤–Ω–∏–∫ –∑—ñ –∑–Ω–∞–π–¥–µ–Ω–∏–º–∏ –≥—Ä—É–ø–∞–º–∏
        #print(line, XYZ) # —Ç—ñ–ª—å–∫–∏ –¥–ª—è –≤—ñ–¥–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
        x=int(XYZ['X']) # –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ –≤ —á–∏—Å–ª–æ
        y=int(XYZ['Y'])
        z=int(XYZ['Z'])
        X.append(x) # –¥–æ–¥–∞—Ç–∏ –¥–æ —Å–ø–∏—Å–∫—É
        Y.append(y)
        Z.append(z)
    return X,Y,Z

def draw_path(X,Y,Z):
    """–†–∏—Å—É—î —à–ª—è—Ö —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∑–∞ —Å–ø–∏—Å–∫–∞–º–∏ X,Y,Z –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º plotly"""
    import plotly.graph_objects as go

    fig=go.Figure(data=[go.Scatter3d(x=X,y=Y,z=Z,mode='lines+markers',marker=dict(size=5),line=dict(width=2))]) # —Ç—Ä–∏–≤–∏–º—ñ—Ä–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ –∑ —Ç–æ—á–∫–∞–º–∏

    fig.update_layout(scene=dict(xaxis_title='X Axis', yaxis_title='Y Axis', zaxis_title='Z Axis'), title="3D Tool Path Visualization") # –∑–∞–≥–æ–ª–æ–≤–æ–∫ —ñ –Ω–∞–∑–≤–∏ –æ—Å–µ–π

    return fig


def run_gcode(text):
    "–í–∏–∫–æ–Ω—É—î –ø—Ä–æ–≥—Ä–∞–º—É –¥–ª—è –≤–µ—Ä—Å—Ç–∞—Ç–∞, —â–æ –ø—ñ–¥—Ç—Ä–∏–º—É—î GRBL"
    import serial
    import time
    s = serial.Serial('COM14', 115200) # –Ω–∞–∑–≤–∞ —ñ —à–≤–∏–¥–∫—ñ—Å—Ç—å –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞
    #s = serial.Serial('COM4', 9600)

    s.write("\r\n\r\n".encode("utf-8")) # –ø—Ä–æ–±—É–¥–∏—Ç–∏ GRBL
    time.sleep(2)   # —á–µ–∫–∞—Ç–∏, –ø–æ–∫–∏ GRBL —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è
    s.flushInput()  # –æ—á–∏—Å—Ç–∏—Ç–∏ —Ç–µ–∫—Å—Ç –≤ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ–º—É –ø–æ—Ä—Ç—ñ

    for line in text.splitlines(): # –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ä—è–¥–∫–∞ G-–∫–æ–¥—É
        l = line.strip() # –≤–∏–¥–∞–ª–∏–∏—Ç–∏ —É—Å—ñ —Å–∏–º–≤–æ–ª–∏ EOL
        print('Sending: ' + l,)
        l+='\n' # –¥–æ–¥–∞—Ç–∏ —Å–∏–º–≤–æ–ª –∫—ñ–Ω—Ü—è —Ä—è–¥–∫–∞
        s.write(l.encode("utf-8")) # –≤—ñ–¥—ñ—Å–ª–∞—Ç–∏ G-–∫–æ–¥ –Ω–∞ GRBL
        grbl_out = s.readline().decode("utf-8") # —á–∫–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑ –ø–æ–≤–µ—Ä–µ–Ω–Ω—è–º –∫–∞—Ä–µ—Ç–∫–∏
        print(' : ' + grbl_out.strip())
    s.close() # –∑–∞–∫—Ä–∏—Ç–∏ –ø–æ—Ä—Ç

st.title("üí¨DeepSeek CNC-Chatbot") # –∑–∞–≥–æ–ª–æ–≤–æ–∫ Streamlit –ø—Ä–æ–≥—Ä–∞–º–∏
sys_output="–Ø –º–æ–∂—É —Å—Ç–≤–æ—Ä–∏—Ç–∏ –±—É–¥—å-—è–∫–∏–π G-–∫–æ–¥ –¥–ª—è –≤–µ—Ä—Å—Ç–∞—Ç–∞ –∑ –ß–ü–ö, —â–æ —Ä–∏—Å—É—î –º–∞—Ä–∫–µ—Ä–æ–º, –Ω–∞ –æ—Å–Ω–æ–≤—ñ GRBL —Ç–∞ –ø–æ—è—Å–Ω–∏—Ç–∏ –π–æ–≥–æ"
st.caption(sys_output) # –≤–∏–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç

user_input = st.text_area("–ó–∞–ø–∏—Ç–∞–Ω–Ω—è:", value="–°—Ç–≤–æ—Ä–∏ –∫–æ–¥ –¥–ª—è —Ä–∏—Å—É–≤–∞–Ω–Ω—è –ª—ñ–Ω—ñ—ó. –ë–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ —ñ –ø–æ—è—Å–Ω–µ–Ω—å") # –±–∞–≥–∞—Ç–æ—Ä—è–¥–∫–æ–≤–µ –ø–æ–ª–µ –≤–≤–µ–¥–µ–Ω–Ω—è –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

if st.button("–ù–∞–¥—ñ—Å–ª–∞—Ç–∏"):
    client = OpenAI(api_key=api_key, base_url="https://api.deepseek.com")
    messages=[
        {"role": "system", "content": sys_output},
        {"role": "user", "content": user_input},
    ] # –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ —ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    response = client.chat.completions.create(model="deepseek-chat", messages=messages) # –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    msg = response.choices[0].message.content # —Ç–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    st.caption("–í—ñ–¥–ø–æ–≤—ñ–¥—å:")
    st.write(msg) # –≤–∏–≤–µ—Å—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å

checkbox = st.checkbox("–í–∏–∫–æ–Ω–∞–Ω–Ω—è –Ω–∞ GRBL") # —è–∫—â–æ True, —Ç–æ –∫–æ–¥ –Ω–∞–¥—Å–∏–ª–∞—î—Ç—å—Å—è –Ω–∞ –≤–µ—Ä—Å—Ç–∞—Ç –∑ GRBL

# –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ –∫–Ω–æ–ø–∫—É "–í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è"
if st.button("–í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è"):
    if is_gcode(user_input): # —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤—ñ–≤ G-–∫–æ–¥
        st.markdown("```gcode\n"+user_input+"\n```") # –≤–∏–≤–µ—Å—Ç–∏ –π–æ–≥–æ –∑ –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É
        X,Y,Z=parse_gcode(user_input) # –≤–∏–∫–æ–Ω–∞—Ç–∏ –ø–∞—Ä—Å–∏–Ω–≥ –∫–æ–¥—É
        st.plotly_chart(draw_path(X,Y,Z)) # —Å—Ç–≤–æ—Ä–∏—Ç–∏ —ñ –ø–æ–∫–∞–∑–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ –≤ Streamlit
        #print(user_input)
        if checkbox: # —è–∫—â–æ –æ–±—Ä–∞–Ω–æ "–í–∏–∫–æ–Ω–∞–Ω–Ω—è –Ω–∞ GRBL"
            #print(user_input)
            run_gcode(user_input) # –≤–∏–∫–æ–Ω–∞—Ç–∏ –Ω–∞ GRBL